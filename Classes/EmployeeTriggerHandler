/*********************************************IMPORTANT*********************************************
 * Class: EmployeeTriggerHandler
 * Created by : Rutuja Jagtap
 ---------------------------------------------------------------------------------------------------
 * Purpose: Apex class as handler of EmployeeTrigger
 ---------------------------------------------------------------------------------------------------
 * Version History: (All changes and TA reworks should be entered as new row)
 * VERSION DEVELOPER NAME   DATE       DETAIL FEATURES
   1.0     Rutuja Jagtap    06/05/2020 INITIAL DEVELOPMENT
   2.0     Rutuja Jagtap    07/05/2020 Added after edit and after delete funtionality
***************************************************************************************************/
public class EmployeeTriggerHandler {
    static Boolean toUpdate = false;
    static Boolean getAssetDetail = false;
    static Boolean updateLicenseListAfterInsert = false;
    public static List<Asset> licenseList = new List<Asset>();
    
    /**
     * Method Name: beforeInsertAllotMicrosoftLic
     * Purpose: Check if microsoft license of type selected is available,
     * 			if available assign to the employee and update the count on respective 
     * 			asset lot.
     * */
    public static void beforeInsertAllotMicrosoftLic(List<Contact> newList){
        Integer size = newList.size();
        String licenceType = NULL;
        Boolean errorValid = true;
        
        List<Asset_Lot__c> assetLotListToUpdate = new List<Asset_Lot__c>();
        for(Contact employee : newList){
            if(employee.Microsoft_Licence_Type__c == 'BE'){
                //System.debug('Helo 1');
                getAssetDetail = true;
                licenceType = employee.Microsoft_Licence_Type__c;
            }else if(employee.Microsoft_Licence_Type__c == 'E3'){
                //System.debug('Helo 2');
                getAssetDetail = true;
                licenceType = employee.Microsoft_Licence_Type__c;
            }else{
                errorValid = false;
                //nothing
            }
        }
        if(getAssetDetail){
            licenseList = EmployeeTriggerHelper.getAvailableAssetInfo(licenceType, size);
            //System.debug('licenseList: '+licenseList);
            
            if(licenseList.size() > 0){
                toUpdate = true;
                for(Asset licenseObj : licenseList){
                    assetLotListToUpdate.add(
                    	new Asset_Lot__c(
                        	Id = licenseObj.Asset_Lot__r.Id,
                            Allotted_Asset_Count__c = licenseObj.Asset_Lot__r.Allotted_Asset_Count__c + Constants.ONE,
                            Not_Allotted_Asset_Count__c = licenseObj.Asset_Lot__r.Not_Allotted_Asset_Count__c - Constants.ONE 
                        )
                    );
                }
                //System.debug('assetLotListToUpdate: '+assetLotListToUpdate);
            }
        }
        if(toUpdate){
            try{
                //System.debug('Helo 6');
                toUpdate = false;
                updateLicenseListAfterInsert = true;
                Update assetLotListToUpdate;
                //System.debug('updated asset lot after emp insert');
            }catch(DmlException e){
                System.debug('Exception: '+e);
            }
        }
        if(errorValid){
        	if(licenseList.size() > 0){
                //System.debug('Helo 7');
                for(Integer i=0; i < licenseList.size() ; i++){
                    newList[i].Microsoft_Licence__c = licenseList[i].Id;
                }
            }else{
                newList[0].addError('This licence is out of stock.');
            }    
        }
        
    }
    
    /**
     * Method Name: beforeUpdateAllotMicrosoftLic
     * Purpose: If after inserting employee no license was assigned, then after edit it is assigned
     * Parameters: old and new contact map
     * */
    public static void beforeUpdateAllotMicrosoftLic(Map<Id, Contact> oldMap,Map<Id, Contact> newMap ){
        Boolean errorValid = false;
        String licenceType = null;
        Integer size = newMap.keySet().size();
        List<Asset_Lot__c> assetLotListToUpdate = new List<Asset_Lot__c>();
        for(Id key : newMap.keySet()){
            Contact oldEmp = oldMap.get(key);
            Contact newEmp = newMap.get(key);
            if(oldEmp.Microsoft_Licence_Type__c == NULL && newEmp.Microsoft_Licence_Type__c != NULL){
                //System.debug('in woo');
                errorValid = true;
                if(newEmp.Microsoft_Licence_Type__c == 'BE'){
                    //System.debug('Helo 1');
                    getAssetDetail = true;
                    licenceType = newEmp.Microsoft_Licence_Type__c;
                }else if(newEmp.Microsoft_Licence_Type__c == 'E3'){
                    //System.debug('Helo 2');
                    getAssetDetail = true;
                    licenceType = newEmp.Microsoft_Licence_Type__c;
                }else{
                    errorValid = false;
                    //nothing
                    //System.debug('In nothing');
                }
            }else if( (oldEmp.Microsoft_Licence_Type__c == 'BE' || oldEmp.Microsoft_Licence_Type__c == 'E3') && newEmp.Microsoft_Licence_Type__c == NULL){
                //System.debug('Do nothing');
                getAssetDetail = false;
                errorValid = false;
                toUpdate = false;
            }
        }
        if(getAssetDetail){
            licenseList = EmployeeTriggerHelper.getAvailableAssetInfo(licenceType, size);
            for(Asset license : licenseList){
                if(license.Asset_Lot__r.Not_Allotted_Asset_Count__c <=0){
                    newMap.values()[0].addError(license.Specific_Asset_Type__c+' licence is out of stock.');
                }
            }
            //System.debug('licenseList: '+licenseList);
            if(licenseList.size() > 0){
                toUpdate = true;
                for(Asset licenseObj : licenseList){
                    assetLotListToUpdate.add(
                    	new Asset_Lot__c(
                        	Id = licenseObj.Asset_Lot__r.Id,
                            Allotted_Asset_Count__c = licenseObj.Asset_Lot__r.Allotted_Asset_Count__c + Constants.ONE,
                            Not_Allotted_Asset_Count__c = licenseObj.Asset_Lot__r.Not_Allotted_Asset_Count__c - Constants.ONE 
                        )
                    );
                }
                //System.debug('assetLotListToUpdate: '+assetLotListToUpdate);
            }
        }
        if(toUpdate){
            try{
                //System.debug('Helo 6');
                toUpdate = false;
                updateLicenseListAfterInsert = true;
                afterInsertUpdateAssetAllotted(newMap);
                Update assetLotListToUpdate;
                //System.debug('updated asset lot after emp insert');
            }catch(DmlException e){
                System.debug('Exception: '+e);
            }
        }
        if(errorValid){
        	if(licenseList.size() > 0){
                //System.debug('Helo 7');
                for(Integer i=0; i < licenseList.size() ; i++){
                    newMap.values()[i].Microsoft_Licence__c = licenseList[i].Id;
                }
            }else{
                newMap.values()[0].addError('This licence is out of stock.');
            }    
        }
        
    }
    
    /**
     * Method Name:afterInsertUpdateAssetAllotted
     * Purpose: After insert or update if MS license was allotted then update asset
     * Parameter: Contact new map
     * */
    public static void afterInsertUpdateAssetAllotted(Map<Id, Contact> newMap){
        Boolean updateAsset = false;
        if(updateLicenseListAfterInsert){
            updateAsset = true;
            //System.debug('after insert to update asset');
            for(Integer i=0; i < licenseList.size() ; i++){
                licenseList[i].ContactID = newMap.values()[i].Id;
                licenseList[i].Status = 'Working - Allotted';
                //System.debug('emp id: '+licenseList[i].ContactID);
            }
        }
        if(updateAsset){
            try{
                //System.debug('updated asset by setting employee id');
                Update licenseList;
            }catch(DmlException e){
                System.debug('Exception: '+e);
            }
        }
    }
    
    /**
     * Method Name: afterUpdateReleaseMicrosoftLicense
     * Purpose: after update release MS license.
     * Parameters: old and new contact map
     * */
    public static void afterUpdateReleaseMicrosoftLicense(Map<Id, Contact> oldMap, Map<Id, Contact> newMap){
        Boolean updateAssetAndAssetLot = false;
        //System.debug('in after update to release lic');
        List<Id> assetToUpdate = new List<Id>();
        for(Id key : newMap.keySet()){
            Contact newEmp = newMap.get(key);
            Contact oldEmp = oldMap.get(key);
            if(oldEmp.Microsoft_Licence_Type__c != NULL && newEmp.Microsoft_Licence_Type__c == NULL){
                //System.debug('time to Release ms lic');
                //update asset lot and asset
                updateAssetAndAssetLot = true;
                //System.debug('in after update to release lic on11');
                assetToUpdate.add(oldEmp.Microsoft_Licence__c);
            }
        }
        if(updateAssetAndAssetLot){
            Map<Id, Asset> assets = EmployeeTriggerHelper.getRelatedAssetLotOfAsset(assetToUpdate);
            for(Id key : assets.keySet()){
                //System.debug('in after update to release lic on3323');
                Asset asset = assets.get(key);
              	asset.Status = 'Working - Not Allotted';
                asset.ContactId = null;
            }
            try{
                TriggerRecusionControl.setAssetLot(false);
                Update assets.values();
                //System.debug('in after update to release lic on999');
            }catch(DmlException e){
                System.debug('Exception: '+e);
            }
        }
    }
    
    /**
     * Method Name: beforeUpdateBeforeDeactiveSetMSLic
     * Purpose: Before update if employee is deactive set ms lic to null
     * */
    public static void beforeUpdateBeforeDeactiveSetMSLic(
    	Map<Id, Contact> oldMap, Map<Id, Contact> newMap
    ){
        for(Id key : newMap.keySet()){
            Contact oldEmp = oldMap.get(key);
            Contact newEmp = newMap.get(key);
            if(oldEmp.Deactive__c == false && newEmp.Deactive__c == true){
                newEmp.Microsoft_Licence_Type__c = NULL;
            }
        }
    }
    public static void afterUpdateAfterDeactiveRelease(
        Map<Id, Contact> oldMap, Map<Id, Contact> newMap
    ){
        Boolean getAssetsAssociated = false;
        List<Id> empIds = new List<Id>();
        Map<Id, List<Asset>> assetMapRelatedToEmp = new Map<Id, List<Asset>>();
        for(Id key : newMap.keySet()){
            Contact oldEmp = oldMap.get(key);
            Contact newEmp = newMap.get(key);
            if(oldEmp.Deactive__c == false && newEmp.Deactive__c == true){
                //System.debug('Emp is made deactive');
                getAssetsAssociated = true;
                empIds.add(newEmp.Id);
                //System.debug('empIds: '+empIds);
            }
        }
        if(getAssetsAssociated){
            assetMapRelatedToEmp = EmployeeTriggerHelper.getAssetsRelatedToEmployee(empIds);
            for(Id key : assetMapRelatedToEmp.keySet()){
                List<Asset> assets = assetMapRelatedToEmp.get(key);
                for(Asset asset : assets){
                    if(asset.Asset_Type__c == 'Software'){
                        asset.Status = NULL;
                        //System.debug('Asset is software');
                    }else{
                    	asset.Status = 'Working - Not Allotted';    
                        //System.debug('Asset is other than software');
                    }
                    asset.ContactId = NULL;
                }
            }
            try{
                List<Asset> assetUpadetList = new List<Asset>();
                for(Id key : empIds){
                	for(Asset asset : assetMapRelatedToEmp.get(key)){
                    	assetUpadetList.add(asset);
                	}    
                }
                //System.debug('assetUpadetList size: '+assetUpadetList.size());
                Update assetUpadetList;
                
            }catch(DmlException e){
                System.debug('Exception: '+e);
            }
        }
    }
}